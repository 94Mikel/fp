/*
 * Compania.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Wed Jan 18 09:38:54 2017
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package aereo;

import com.matisse.reflect.*;

/**
 * <code>Compania</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Compania extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Wed Jan 18 09:38:54 2017
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Compania</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("aereo.Compania"));

    /**
     * Gets the <code>Compania</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Compania(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Compania(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Compania.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Compania.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Compania.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Compania.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'nombre' */

    /** Attribute <code>nombre</code> cache ID */
    private static int nombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre",CID));

    /**
     * Gets the <code>nombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreCID);
    }


    /**
     * Gets the <code>nombre</code> attribute value.
     * @return the value
     *
     * @see #setNombre
     * @see #removeNombre
     */
    public final String getNombre() {
        return getString(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre</code> attribute value.
     * @param val the new value
     *
     * @see #getNombre
     * @see #removeNombre
     */
    public final void setNombre(String val) {
        setString(getNombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final void removeNombre() {
        removeValue(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreNull() {
        return isNull(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreDefaultValue() {
        return isDefaultValue(getNombreAttribute(getMtDatabase()));
    }


    /* Attribute 'anofundacion' */

    /** Attribute <code>anofundacion</code> cache ID */
    private static int anofundacionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("anofundacion",CID));

    /**
     * Gets the <code>anofundacion</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAnofundacionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(anofundacionCID);
    }


    /**
     * Gets the <code>anofundacion</code> attribute value.
     * @return the value
     *
     * @see #setAnofundacion
     * @see #removeAnofundacion
     */
    public final int getAnofundacion() {
        return getInteger(getAnofundacionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>anofundacion</code> attribute value.
     * @param val the new value
     *
     * @see #getAnofundacion
     * @see #removeAnofundacion
     */
    public final void setAnofundacion(int val) {
        setInteger(getAnofundacionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>anofundacion</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAnofundacion
     * @see #setAnofundacion
     */
    public final void removeAnofundacion() {
        removeValue(getAnofundacionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAnofundacion
     * @see #setAnofundacion
     */
    public final boolean isAnofundacionNull() {
        return isNull(getAnofundacionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAnofundacion
     * @see #setAnofundacion
     */
    public final boolean isAnofundacionDefaultValue() {
        return isDefaultValue(getAnofundacionAttribute(getMtDatabase()));
    }


    /* Attribute 'presidente' */

    /** Attribute <code>presidente</code> cache ID */
    private static int presidenteCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("presidente",CID));

    /**
     * Gets the <code>presidente</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPresidenteAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(presidenteCID);
    }


    /**
     * Gets the <code>presidente</code> attribute value.
     * @return the value
     *
     * @see #setPresidente
     * @see #removePresidente
     */
    public final String getPresidente() {
        return getString(getPresidenteAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>presidente</code> attribute value.
     * @param val the new value
     *
     * @see #getPresidente
     * @see #removePresidente
     */
    public final void setPresidente(String val) {
        setString(getPresidenteAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>presidente</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPresidente
     * @see #setPresidente
     */
    public final void removePresidente() {
        removeValue(getPresidenteAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPresidente
     * @see #setPresidente
     */
    public final boolean isPresidenteNull() {
        return isNull(getPresidenteAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPresidente
     * @see #setPresidente
     */
    public final boolean isPresidenteDefaultValue() {
        return isDefaultValue(getPresidenteAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'opera' */

    /** Relationship <code>opera</code> cache ID */
    private static int operaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("opera",CID));

    /**
     * Gets the <code>opera</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getOperaRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(operaCID);
    }

    /**
     * Gets the <code>opera</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getOperaSize
     * @see #operaIterator
     * @see #setOpera
     * @see #removeOpera
     */
    public final aereo.Aeropuerto[] getOpera() {
        return (aereo.Aeropuerto[])getSuccessors(getOperaRelationship(getMtDatabase()), aereo.Aeropuerto.class);
    }

    /**
     * Counts the <code>opera</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getOpera
     * @see #operaIterator
     * @see #setOpera
     * @see #removeOpera
     */
    public final int getOperaSize() {
        return getSuccessorSize(getOperaRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>opera</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getOpera
     * @see #getOperaSize
     * @see #setOpera
     * @see #removeOpera
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> operaIterator() {
        return this.<E>successorIterator(getOperaRelationship(getMtDatabase()), aereo.Aeropuerto.class);
    }

    /**
     * Sets the <code>opera</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getOpera
     * @see #getOperaSize
     * @see #operaIterator
     * @see #removeOpera
     */
    public final void setOpera(aereo.Aeropuerto[] succs) {
        setSuccessors(getOperaRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>opera</code> successors list.
     * @param succ the object to add
     *
     * @see #getOpera
     * @see #getOperaSize
     * @see #operaIterator
     * @see #setOpera
     * @see #removeOpera
     */
    public final void prependOpera(aereo.Aeropuerto succ) {
        prependSuccessor(getOperaRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>opera</code> successors list.
     * @param succ the object to add
     *
     * @see #getOpera
     * @see #setOpera
     * @see #removeOpera
     * @see #getOperaSize
     * @see #operaIterator
     */
    public final void appendOpera(aereo.Aeropuerto succ) {
        appendSuccessor(getOperaRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>opera</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getOpera
     * @see #setOpera
     * @see #removeOpera
     * @see #getOperaSize
     * @see #operaIterator
     */
    public final void appendOpera(aereo.Aeropuerto[] succs) {
        addSuccessors(getOperaRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>opera</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getOpera
     * @see #setOpera
     * @see #getOperaSize
     * @see #operaIterator
     */
    public void removeOpera(aereo.Aeropuerto[] succs) {
        removeSuccessors(getOperaRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>opera</code> successors list.
     * @param succ the object to remove
     *
     * @see #getOpera
     * @see #setOpera
     * @see #getOperaSize
     * @see #operaIterator
     */
    public void removeOpera(aereo.Aeropuerto succ) {
        removeSuccessor(getOperaRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>opera</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearOpera() {
        clearSuccessors(getOperaRelationship(getMtDatabase()));
    }


    /*
     * SQL Method access methods
     */

    /**
     * SQL Method call.
     * @return the SQL Method return value
     */
    public String nombrePresidente()
        throws java.sql.SQLException {
        return (String)executeSQLMethod("aereo.Compania", "NombrePresidente", 0,
                                        new Object[0],
                                        new int[0],
                                        new int[0]);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Compania(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Compania]";
    }
}
