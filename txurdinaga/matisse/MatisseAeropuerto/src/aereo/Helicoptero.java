/*
 * Helicoptero.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Wed Jan 18 09:38:54 2017
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package aereo;

import com.matisse.reflect.*;

/**
 * <code>Helicoptero</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Helicoptero extends aereo.Vehiculo {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Wed Jan 18 09:38:54 2017
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Helicoptero</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("aereo.Helicoptero"));

    /**
     * Gets the <code>Helicoptero</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Helicoptero(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Helicoptero(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Helicoptero.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Helicoptero.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Helicoptero.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Helicoptero.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'nhelices' */

    /** Attribute <code>nhelices</code> cache ID */
    private static int nhelicesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nhelices",CID));

    /**
     * Gets the <code>nhelices</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNhelicesAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nhelicesCID);
    }


    /**
     * Gets the <code>nhelices</code> attribute value.
     * @return the value
     *
     * @see #setNhelices
     * @see #removeNhelices
     */
    public final int getNhelices() {
        return getInteger(getNhelicesAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nhelices</code> attribute value.
     * @param val the new value
     *
     * @see #getNhelices
     * @see #removeNhelices
     */
    public final void setNhelices(int val) {
        setInteger(getNhelicesAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nhelices</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNhelices
     * @see #setNhelices
     */
    public final void removeNhelices() {
        removeValue(getNhelicesAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNhelices
     * @see #setNhelices
     */
    public final boolean isNhelicesNull() {
        return isNull(getNhelicesAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNhelices
     * @see #setNhelices
     */
    public final boolean isNhelicesDefaultValue() {
        return isDefaultValue(getNhelicesAttribute(getMtDatabase()));
    }


    /* Attribute 'capacidad' */

    /** Attribute <code>capacidad</code> cache ID */
    private static int capacidadCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("capacidad",CID));

    /**
     * Gets the <code>capacidad</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCapacidadAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(capacidadCID);
    }


    /**
     * Gets the <code>capacidad</code> attribute value.
     * @return the value
     *
     * @see #setCapacidad
     * @see #removeCapacidad
     */
    public final int getCapacidad() {
        return getInteger(getCapacidadAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>capacidad</code> attribute value.
     * @param val the new value
     *
     * @see #getCapacidad
     * @see #removeCapacidad
     */
    public final void setCapacidad(int val) {
        setInteger(getCapacidadAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>capacidad</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCapacidad
     * @see #setCapacidad
     */
    public final void removeCapacidad() {
        removeValue(getCapacidadAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getCapacidad
     * @see #setCapacidad
     */
    public final boolean isCapacidadNull() {
        return isNull(getCapacidadAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCapacidad
     * @see #setCapacidad
     */
    public final boolean isCapacidadDefaultValue() {
        return isDefaultValue(getCapacidadAttribute(getMtDatabase()));
    }


    /* Attribute 'medida' */

    /** Attribute <code>medida</code> cache ID */
    private static int medidaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("medida",CID));

    /**
     * Gets the <code>medida</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMedidaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(medidaCID);
    }


    /**
     * Gets the <code>medida</code> attribute value.
     * @return the value
     *
     * @see #setMedida
     * @see #removeMedida
     */
    public final int getMedida() {
        return getInteger(getMedidaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>medida</code> attribute value.
     * @param val the new value
     *
     * @see #getMedida
     * @see #removeMedida
     */
    public final void setMedida(int val) {
        setInteger(getMedidaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>medida</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMedida
     * @see #setMedida
     */
    public final void removeMedida() {
        removeValue(getMedidaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMedida
     * @see #setMedida
     */
    public final boolean isMedidaNull() {
        return isNull(getMedidaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMedida
     * @see #setMedida
     */
    public final boolean isMedidaDefaultValue() {
        return isDefaultValue(getMedidaAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Helicoptero(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Helicoptero]";
    }
}
