/*
 * Vehiculo.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Wed Jan 18 09:38:54 2017
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package aereo;

import com.matisse.reflect.*;

/**
 * <code>Vehiculo</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Vehiculo extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Wed Jan 18 09:38:54 2017
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Vehiculo</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("aereo.Vehiculo"));

    /**
     * Gets the <code>Vehiculo</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Vehiculo(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Vehiculo(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Vehiculo.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Vehiculo.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Vehiculo.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Vehiculo.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'combustible' */

    /** Attribute <code>combustible</code> cache ID */
    private static int combustibleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("combustible",CID));

    /**
     * Gets the <code>combustible</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCombustibleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(combustibleCID);
    }


    /**
     * Gets the <code>combustible</code> attribute value.
     * @return the value
     *
     * @see #setCombustible
     * @see #removeCombustible
     */
    public final float getCombustible() {
        return getFloat(getCombustibleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>combustible</code> attribute value.
     * @param val the new value
     *
     * @see #getCombustible
     * @see #removeCombustible
     */
    public final void setCombustible(float val) {
        setFloat(getCombustibleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>combustible</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCombustible
     * @see #setCombustible
     */
    public final void removeCombustible() {
        removeValue(getCombustibleAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getCombustible
     * @see #setCombustible
     */
    public final boolean isCombustibleNull() {
        return isNull(getCombustibleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCombustible
     * @see #setCombustible
     */
    public final boolean isCombustibleDefaultValue() {
        return isDefaultValue(getCombustibleAttribute(getMtDatabase()));
    }


    /* Attribute 'nmatricula' */

    /** Attribute <code>nmatricula</code> cache ID */
    private static int nmatriculaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nmatricula",CID));

    /**
     * Gets the <code>nmatricula</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNmatriculaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nmatriculaCID);
    }


    /**
     * Gets the <code>nmatricula</code> attribute value.
     * @return the value
     *
     * @see #setNmatricula
     * @see #removeNmatricula
     */
    public final int getNmatricula() {
        return getInteger(getNmatriculaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nmatricula</code> attribute value.
     * @param val the new value
     *
     * @see #getNmatricula
     * @see #removeNmatricula
     */
    public final void setNmatricula(int val) {
        setInteger(getNmatriculaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nmatricula</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNmatricula
     * @see #setNmatricula
     */
    public final void removeNmatricula() {
        removeValue(getNmatriculaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNmatricula
     * @see #setNmatricula
     */
    public final boolean isNmatriculaNull() {
        return isNull(getNmatriculaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNmatricula
     * @see #setNmatricula
     */
    public final boolean isNmatriculaDefaultValue() {
        return isDefaultValue(getNmatriculaAttribute(getMtDatabase()));
    }


    /* Attribute 'ano' */

    /** Attribute <code>ano</code> cache ID */
    private static int anoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ano",CID));

    /**
     * Gets the <code>ano</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getanoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(anoCID);
    }


    /**
     * Gets the <code>ano</code> attribute value.
     * @return the value
     *
     * @see #setano
     * @see #removeano
     */
    public final int getano() {
        return getInteger(getanoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ano</code> attribute value.
     * @param val the new value
     *
     * @see #getano
     * @see #removeano
     */
    public final void setano(int val) {
        setInteger(getanoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ano</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getano
     * @see #setano
     */
    public final void removeano() {
        removeValue(getanoAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getano
     * @see #setano
     */
    public final boolean isanoNull() {
        return isNull(getanoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getano
     * @see #setano
     */
    public final boolean isanoDefaultValue() {
        return isDefaultValue(getanoAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'poseido_por' */

    /** Relationship <code>poseido_por</code> cache ID */
    private static int poseido_porCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("poseido_por",CID));

    /**
     * Gets the <code>poseido_por</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getPoseido_porRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(poseido_porCID);
    }

    /**
     * Gets the <code>poseido_por</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     * @see #setPoseido_por
     * @see #removePoseido_por
     */
    public final aereo.Aeropuerto[] getPoseido_por() {
        return (aereo.Aeropuerto[])getSuccessors(getPoseido_porRelationship(getMtDatabase()), aereo.Aeropuerto.class);
    }

    /**
     * Counts the <code>poseido_por</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getPoseido_por
     * @see #poseido_porIterator
     * @see #setPoseido_por
     * @see #removePoseido_por
     */
    public final int getPoseido_porSize() {
        return getSuccessorSize(getPoseido_porRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>poseido_por</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getPoseido_por
     * @see #getPoseido_porSize
     * @see #setPoseido_por
     * @see #removePoseido_por
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> poseido_porIterator() {
        return this.<E>successorIterator(getPoseido_porRelationship(getMtDatabase()), aereo.Aeropuerto.class);
    }

    /**
     * Sets the <code>poseido_por</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getPoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     * @see #removePoseido_por
     */
    public final void setPoseido_por(aereo.Aeropuerto[] succs) {
        setSuccessors(getPoseido_porRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>poseido_por</code> successors list.
     * @param succ the object to add
     *
     * @see #getPoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     * @see #setPoseido_por
     * @see #removePoseido_por
     */
    public final void prependPoseido_por(aereo.Aeropuerto succ) {
        prependSuccessor(getPoseido_porRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>poseido_por</code> successors list.
     * @param succ the object to add
     *
     * @see #getPoseido_por
     * @see #setPoseido_por
     * @see #removePoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     */
    public final void appendPoseido_por(aereo.Aeropuerto succ) {
        appendSuccessor(getPoseido_porRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>poseido_por</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getPoseido_por
     * @see #setPoseido_por
     * @see #removePoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     */
    public final void appendPoseido_por(aereo.Aeropuerto[] succs) {
        addSuccessors(getPoseido_porRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>poseido_por</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getPoseido_por
     * @see #setPoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     */
    public void removePoseido_por(aereo.Aeropuerto[] succs) {
        removeSuccessors(getPoseido_porRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>poseido_por</code> successors list.
     * @param succ the object to remove
     *
     * @see #getPoseido_por
     * @see #setPoseido_por
     * @see #getPoseido_porSize
     * @see #poseido_porIterator
     */
    public void removePoseido_por(aereo.Aeropuerto succ) {
        removeSuccessor(getPoseido_porRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>poseido_por</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearPoseido_por() {
        clearSuccessors(getPoseido_porRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Vehiculo(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Vehiculo]";
    }
}
